# Задание 6 (повышенной сложности): Новые Классы Героев (15 минут)
# Цель: Проверить умение использовать наследование, super() и переопределение методов.

# Создайте новый класс Warrior, который наследуется от класса Hero.
# В конструкторе __init__ он должен принимать name, health и новый атрибут armor (броня). Используйте super() для вызова родительского конструктора.
# Переопределите метод take_damage(damage). Урон для воина должен уменьшаться на величину его брони. Если урон меньше или равен броне, он не получает урона вообще. Не забудьте вызвать родительский метод take_damage с уже посчитанным уроном, чтобы не дублировать логику вывода сообщения.
# Создайте новый класс Mage, который наследуется от Hero.
# В конструкторе __init__ он должен принимать name, health и mana (мана).
# Добавьте ему новый метод cast_fireball(other_hero), который наносит 30 урона другому герою (other_hero) и тратит 20 маны у мага.
# Пример использования:
# warrior = Warrior("Боромир", 100, 10)
# mage = Mage("Гэндальф", 80, 50)
# print(warrior)
# warrior.take_damage(20) # 20 урона - 10 брони = 10 реального урона
# print(warrior)
# print(mage)
# mage.cast_fireball(warrior)
# print(f"Мана мага: {mage.mana}")
# print(f"Здоровье воина после атаки: {warrior.health}") 

# Ожидаемый результат (может немного отличаться в зависимости от реализации вывода):
# Герой Боромир, Здоровье: 100
# Боромир получил 10 урона. Осталось 90 здоровья.
# Герой Боромир, Здоровье: 90
# Герой Гэндальф, Здоровье: 80
# Мана мага: 30
# Боромир получил 20 урона. Осталось 70 здоровья.
# Здоровье воина после атаки: 70

   